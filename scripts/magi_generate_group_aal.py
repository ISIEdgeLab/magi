#!/usr/bin/env python

import sys
import yaml
import subprocess
import re           # great, now i've got two problems. 
import time
from os.path import basename
from collections import defaultdict
from optparse import OptionParser

if __name__ == '__main__': 
    script_name = basename(sys.argv[0])
    usage = 'Usage: %s [options] group=regex ... group=regex' % script_name
    usage += ('\n\n\tWhere "group" is the group name added to the AAL '
              '\n\tand "regex" is the regular expression applied '
              '\n\tto all node names in the experiment.'
              '\n\n\tFor example:\n\n\t\t> %s -e deter,myExp myFoo=\'^foo.*\''
              '\n\n\twould create an AAL with a "myFoo" group which contains all nodes '
              '\n\tin the experiment deter,myExp whose names start with foo.'
              '\n\n\tThe script always creates a group "all_nodes" which contains'
              '\n\tall nodes in the experiment. The AAL is written to stdout.' % script_name)
    parser = OptionParser(usage=usage)
    parser.add_option('-e', '--experiment', 
                      help='The experiment to generate AAL from. Must be of the form GROUP,EXPERIMENT. '
                      'i.e. DETER,myExperiment')
    parser.add_option('-c', '--container', action='store_true', help='This experiment has containers.')
    (opts, args) = parser.parse_args()

    if not opts.experiment:
        print 'Required argument --experiment (or -e) missing.'
        sys.exit(1)

    container = '-c' if opts.container else ''

    list_node_cmd = ('/usr/testbed/bin/script_wrapper.py node_list '
                     '-v -e %s %s' % (opts.experiment, container))
   
    try:
        proc = subprocess.Popen(list_node_cmd.split(), stdout=subprocess.PIPE)
        proc.wait()
        if proc.returncode != 0:
            print 'Error getting experiment nodes. Is it swapped in?'
            sys.exit(1)

        node_list = [node for node in proc.communicate()[0].split()]
    except Exception as e:
        print 'Error generating node list in experiment %s: %s' % (expname, e)
        sys.exit(1)

    aal_group_map = defaultdict(str)
    aal_group_map['all_nodes'] = '.*'

    for arg in args:
        if -1 != arg.find('='):
            key, value = arg.split('=')
            aal_group_map[key] = value

    aal = defaultdict(list)
    for group, regex in aal_group_map.iteritems():
        for node_name in node_list:
            m = re.search(regex, node_name)
            if m:
                aal[group].append(node_name)

    print '#'
    print '# AAL generated by %s at %s' % (basename(sys.argv[0]), time.asctime(time.localtime()))
    print '# from experiment %s' % opts.experiment
    print '#'
    print yaml.dump({'groups': dict(aal)})
