## The agent implementation and addressing information 
groups:
  client_group: [client0, client1, client2, client3, client4, client5, client6, client7, client8, client9, client10, client11, client12, client13, client14, client15, client16, client17, client18, client19, client20, client21, client22, client23, client24, client25, client26, client27, client28, client29, client30, client31, client32, client33, client34, client35, client36, client37, client38, client39, client40, client41, client42, client43, client44, client45, client46, client47 ]
  attacker_group: [client48, client49 ]
  pktcounter_group: [client49, server1]
  server_group: &slist [ server1]

agents:
  client_agent:
    group: client_group
    path: /share/magi/modules/http_client/http_client.tar.gz
    execargs: {servers: *slist, interval: '5', sizes: 'minmax(1000,10000)'}

  attacker_agent:
    group: attacker_group
    path: /share/magi/modules/flooder/flooder.tar.gz
    execargs: []

  server_agent:
    group: server_group
    path: /share/magi/modules/apache/apache.tar.gz 
    execargs: []

  tcpdump_agent:
    group: server_group
    path: /proj/montage/modules/tcpdump/tcpdump.tar.gz
    execargs: {dest: 'client49'}

  pktcounter_agent:
    group: pktcounter_group
    path: /proj/montage/modules/pktcounters/pktCountersAgent.tar.gz
    execargs: []

  nodestats_agent:
    group: pktcounter_group
    path: /share/magi/modules/nodeStats/nodeStats.tar.gz
    execargs: []

## The mapping from the AAL procedure to the experiment apparatus 

streamstarts: [ Initstream, serverstream, clientstream, cleanupstream, attackerstream ]

eventstreams:

  Initstream:
      - type: event
        agent: nodestats_agent
        method: startCollection
        args: {}

      - type: event
        agent: tcpdump_agent
        method: startCollection
        args: {}

      - type: event
        agent: pktcounter_agent
        method: setDefaults
        args: {}

      - type: event
        agent: pktcounter_agent
        method: setConfiguration
        args:
          interval: 1

      - type: event
        agent: pktcounter_agent
        method: startCollection
        trigger: initComplete
        args: {}

  serverstream: 
      - type: trigger
        triggers: [ {event: initComplete} ]

      - type: event
        agent: server_agent 
        method: startServer
        trigger: serverStarted 
        args: {}

      - type: trigger
        triggers: [ { event: clientStopped} ] 

      - type: event
        agent: server_agent 
        method: stopServer 
        trigger: serverStopped 
        args: {} 

  clientstream:      
      - type: trigger
        triggers: [ { event: serverStarted } ] 

      - type: event
        agent: client_agent 
        method: startClient
        trigger: clientStarted
        args: {}

      - type: trigger
        triggers: [ { event: attackerStopped } ]

      - type: trigger
        triggers: [ { timeout: 15000 } ]

      - type: event
        agent: client_agent
        method: stopClient
        trigger: clientStopped 
        args: {}

  attackerstream:
      - type: trigger
        triggers: [ { event: clientStarted } ]

      - type: trigger
        triggers: [ { timeout: 15000 } ]

      - type: event
        agent: attacker_agent
        method: setConfiguration
        args: 
            dst: 'server1'
            proto: 'tcp'
            length: '1500'
            ratetype: 'flat'
            highrate: '500'
            sport: 'minmax(1024,4096)'
            dport: 'minmax(1024,4096)'

      - type: event
        agent: attacker_agent
        method: startFlood
        args: {}

      - type: trigger
        triggers: [ { timeout: 300000 } ]

      - type: event
        agent: attacker_agent
        method: stopFlood
        trigger: attackerStopped
        args: {}

  cleanupstream:
      - type: trigger
        triggers: [ {event: serverStopped} ] 

      - type: event
        agent: tcpdump_agent
        method: stopCollection
        args: {}

      - type: event
        agent: pktcounter_agent
        method: stopCollection
        args: {}

      - type: event
        agent: nodestats_agent
        method: stopCollection
        args: {}

      - type: trigger
        triggers: [ {target: exit , timeout: 0 } ]


################################################

